AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  safe-scheme-api
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    MemorySize: 128
    Tracing: Active
    Timeout: 100
    Environment:
      Variables:
        PROJECTS_TABLE: !Ref ProjectsTable
        USER_POOL_ID: !Ref SafeSchemeUserPool
        CLIENT_ID: !Ref SafeSchemeUserPoolClient
        DYNAMODB_ENDPOINT: http://safe-scheme-db:8000

Resources:
  SafeSchemeAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SafeSchemeAPI
      Description: API for Safe Scheme Application
      StageName: prod
      TracingEnabled: true
      GatewayResponses:
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            application/json: { "message": "Invalid or expired token" }
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt: [ SafeSchemeUserPool, Arn ]
            Identity:
              Header: Authorization
              ReauthorizeEvery: 30
        DefaultAuthorizer: CognitoAuthorizer
#
#      Models:
#        Project:
#          type: object
#          required:
#            - Project
#          properties:
#            UserId:
#              type: string
#            Project:
#              type: string
#            ProjectId:
#              type: string
#            Status:
#              type: boolean
#            Tasks:
#              type: object
#              properties:
#                TaskId:
#                  type: string
#                Task:
#                  type: string
#                Status:
#                  type: boolean
#                Subtasks:
#                  type: array
#                  items:
#                    type: object
#                    properties:
#                      SubtaskId:
#                        type: string
#                      Subtask:
#                        type: string
#                      Status:
#                        type: boolean
#        Task:
#          type: object
#          required:
#            - Task
#          properties:
#            TaskId:
#              type: string
#            Task:
#              type: string
#            Status:
#              type: boolean
#            Subtasks:
#              type: object
#              properties:
#                SubtaskId:
#                  type: string
#                Subtask:
#                  type: string
#                Status:
#                  type: boolean
#        Subtask:
#          type: object
#          required:
#            - Subtask
#          properties:
#            SubtaskId:
#              type: string
#            Subtask:
#              type: string
#            Status:
#              type: boolean

  #Project CRUD operations
  facilitatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/facilitator.facilitatorHandler
      Description: Lambda function to facilitate request
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /facilitate
            Method: ANY
#
#  createProjectFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/create-project.createProjectHandler
#      Description: Create project
#      Tracing: Active
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /create-project
#            Method: POST
#
#  getProjectsFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/get-projects.getProjectsHandler
#      Description: Get user projects function
#      Tracing: Active
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /get-projects
#            Method: GET
#
#  editProjectFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/edit-project.editProjectHandler
#      Description: Edit project function
#      Tracing: Active
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /edit-project
#            Method: PUT
#
#  deleteProjectsFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/delete-project.deleteProjectHandler
#      Description: Delete project function
#      Tracing: Active
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /delete-project/{ProjectId}
#            Method: DELETE
#            RequestParameters:
#              - method.request.path.ProjectId:
#                  Required: true
#                  Caching: false
#
#  createTaskFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/create-task.createTaskHandler
#      Tracing: Active
#      Description: Create task for a project
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /create-task/{ProjectId}
#            Method: POST
#            RequestParameters:
#              - method.request.path.ProjectId:
#                  Required: true
#                  Caching: false
#
#  editTaskFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/edit-task.editTaskHandler
#      Tracing: Active
#      Description: Edit task function
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /edit-task/{ProjectId}/{TaskId}
#            RequestParameters:
#              - method.request.path.ProjectId.TaskId:
#                  Required: true
#                  Caching: false
#            Method: PUT
#
#  deleteTaskFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/delete-task.deleteTaskHandler
#      Tracing: Active
#      Description: Delete task function
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /delete-task/{ProjectId}/{TaskId}
#            Method: DELETE
#            RequestParameters:
#              - method.request.path.ProjectId.TaskId:
#                  Required: true
#                  Caching: false
#
#  createSubtaskFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/create-subtask.createSubtaskHandler
#      Tracing: Active
#      Description: Create subtask for a task
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /create-subtask/{ProjectId}/{TaskId}
#            Method: POST
#            RequestParameters:
#              - method.request.path.ProjectId.TaskId:
#                  Required: true
#
#  editSubtaskFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/edit-subtask.editSubtaskHandler
#      Tracing: Active
#      Description: Edit subtask function
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /edit-subtask
#            Method: POST
#
#  deleteSubtaskFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      Handler: dist/src/handlers/delete-subtask.deleteSubtaskHandler
#      Description: Delete subtask function
#      Tracing: Active
#      Policies:
#        - DynamoDBCrudPolicy:
#            TableName: !Ref ProjectsTable
#      Events:
#        Api:
#          Type: Api
#          Properties:
#            RestApiId: !Ref SafeSchemeAPI
#            Path: /delete-subtask/{ProjectId}/{TaskId}/{SubtaskId}
#            Method: DELETE
#            RequestParameters:
#              - method.request.path.ProjectId.TaskId.SubtaskId:
#                  Required: true
#                  Caching: false

  demoProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/demo-project.demoProjectHandler
      Description: Creates a demo project for new users
      Tracing: Active
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable



  #DynamoDB Tables
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "ProjectsTable-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: ProjectId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: ProjectId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  #Cognito pool and client
  SafeSchemeUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SafeSchemeUserPool
      LambdaConfig:
        PostConfirmation: arn:aws:lambda:us-east-1:976193231846:function:safe-scheme-demoProjectFunction-0hzrC1gQ726a
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: given_name
          Required: true
          Mutable: true
          NumberAttributeConstraints:
            MaxValue: "16"
            MinValue: "2"
        - AttributeDataType: String
          Name: family_name
          Required: true
          Mutable: true
          NumberAttributeConstraints:
            MaxValue: "16"
            MinValue: "2"

      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "Your verification code is {####}."
        EmailSubject: "Verify your email address"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref demoProjectFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: arn:aws:cognito-idp:us-east-1:976193231846:userpool/us-east-1_HflfE33BZ


  SafeSchemeUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SafeSchemeUserPool
      ClientName: SafeSchemeUserPoolClient
      AccessTokenValidity: 24
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - profile
        - email
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://staging.d28alr4nb9gk3w.amplifyapp.com/callback
      LogoutURLs:
        - https://staging.d28alr4nb9gk3w.amplifyapp.com/logout
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${SafeSchemeAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  UserPoolId:
    Value: !Ref SafeSchemeUserPool
    Description: 'Cognito User Pool ID'

  UserPoolClientId:
    Value: !Ref SafeSchemeUserPoolClient
    Description: 'Cognito User Pool Client ID'
