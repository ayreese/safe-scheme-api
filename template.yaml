AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  safe-scheme-api
Transform: 'AWS::Serverless-2016-10-31'

Globals:
  Function:
    Runtime: nodejs20.x
    Architectures:
      - x86_64
    MemorySize: 128
    Tracing: Active
    Timeout: 100
    Environment:
      Variables:
        PROJECTS_TABLE: !Ref ProjectsTable
        USER_POOL_ID: !Ref SafeSchemeUserPool
        CLIENT_ID: !Ref SafeSchemeUserPoolClient
        DYNAMODB_ENDPOINT: http://safe-scheme-db:8000

Resources:
  SafeSchemeAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SafeSchemeAPI
      Description: API for Safe Scheme Application
      StageName: prod
      TracingEnabled: true
      GatewayResponses:
        DEFAULT_4XX:
          StatusCode: 404
        UNAUTHORIZED:
          StatusCode: 401
          ResponseTemplates:
            application/json: { "message": "Invalid or expired token" }
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt: [ SafeSchemeUserPool, Arn ]
            Identity:
              Header: Authorization
            AuthorizationScopes:
              - openid
              - profile
              - email
      Models:
        Project:
          type: object
          required:
            - Project
          properties:
            UserId:
              type: string
            Project:
              type: string
            ProjectId:
              type: string
            Status:
              type: boolean
            Tasks:
              type: object
              properties:
                TaskId:
                  type: string
                Task:
                  type: string
                Status:
                  type: boolean
                Subtasks:
                  type: array
                  items:
                    type: object
                    properties:
                      SubtaskId:
                        type: string
                      Subtask:
                        type: string
                      Status:
                        type: boolean
        Task:
          type: object
          required:
            - Task
          properties:
            TaskId:
              type: string
            Task:
              type: string
            Status:
              type: boolean
            Subtasks:
              type: object
              properties:
                SubtaskId:
                  type: string
                Subtask:
                  type: string
                Status:
                  type: boolean
        Subtask:
          type: object
          required:
            - Subtask
          properties:
            SubtaskId:
              type: string
            Subtask:
              type: string
            Status:
              type: boolean

  #Project CRUD operations
  createProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/create-project.createProjectHandler
      Description: Create project for authenticated user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /create-project
            Method: POST
            RequestModel:
              Model: Project
              Required: true
              ValidateBody: true

  getProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/get-projects.getProjectsHandler
      Description: Get user projects function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /get-projects/{UserId}
            Method: GET

  editProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/edit-project.editProjectHandler
      Description: Edit project function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /edit-project/{ProjectId}
            Method: PUT
            RequestParameters:
              - method.request.path.ProjectId:
                  Required: true
                  Caching: false
            RequestModel:
              Model: Project
              Required: true
              ValidateBody: true

  deleteProjectsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/delete-project.deleteProjectHandler
      Description: Delete project function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /delete-project/{ProjectId}
            Method: DELETE
            RequestParameters:
              - method.request.path.ProjectId:
                  Required: true
                  Caching: false

#Task CRUD operations
  createTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/create-task.createTaskHandler
      Description: Create task for a project for an authenticated user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /create-task/{ProjectId}
            Method: POST
            RequestParameters:
              - method.request.path.ProjectId:
                  Required: true
                  Caching: false
            RequestModel:
              Model: Task
              Required: true
              ValidateBody: true

  editTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/edit-task.editTaskHandler
      Description: Edit task function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /edit-task/{ProjectId}/{TaskId}
            RequestParameters:
              - method.request.path.ProjectId.TaskId:
                  Required: true
                  Caching: false
            Method: PUT
            RequestModel:
              Model: Task
              Required: true
              ValidateBody: true

  deleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/delete-task.deleteTaskHandler
      Description: Delete task function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /delete-task/{ProjectId}/{TaskId}
            Method: DELETE
            RequestParameters:
              - method.request.path.ProjectId.TaskId:
                  Required: true
                  Caching: false

  #Subtasks CRUD operations
  createSubtaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/create-subtask.createSubtaskHandler
      Description: Create subtask for a project for an authenticated user
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /create-subtask/{ProjectId}/{TaskId}
            Method: POST
            RequestParameters:
              - method.request.path.ProjectId.TaskId:
                  Required: true
                  Caching: false
            RequestModel:
              Model: Subtask
              Required: true
              ValidateBody: true

  editSubtaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/edit-subtask.editSubtaskHandler
      Description: Edit subtask function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /edit-subtask/{ProjectId}/{TaskId}/{SubtaskId}
            RequestParameters:
              - method.request.path.ProjectId.TaskId.SubtaskId:
                  Required: true
                  Caching: false
            Method: PUT
            RequestModel:
              Model: Subtask
              Required: true
              ValidateBody: true

  deleteSubtaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/delete-subtask.deleteSubtaskHandler
      Description: Delete task function
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref SafeSchemeAPI
            Path: /delete-subtask/{ProjectId}/{TaskId}/{SubtaskId}
            Method: DELETE
            RequestParameters:
              - method.request.path.ProjectId.TaskId.SubtaskId:
                  Required: true
                  Caching: false

  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/src/handlers/post-confirmation.demoProjectHandler
      Description: Creates a demo project when a new user is confirmed in Cognito
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ProjectsTable
      Environment:
        Variables:
          PROJECTS_TABLE: !Ref ProjectsTable
      Events:
        CognitoPostConfirmation:
          Type: CognitoUserPool
          Properties:
            UserPool: !Ref SafeSchemeUserPool
            Trigger: PostConfirmation

  #DynamoDB Tables
  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "ProjectsTable-${AWS::StackName}"
      AttributeDefinitions:
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: ProjectId
          AttributeType: S
      KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: ProjectId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  #Cognito pool and client
  SafeSchemeUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SafeSchemeUserPool
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
        - AttributeDataType: String
          Name: given_name
          Required: true
          Mutable: true
          NumberAttributeConstraints:
            MaxValue: "16"
            MinValue: "2"
        - AttributeDataType: String
          Name: family_name
          Required: true
          Mutable: true
          NumberAttributeConstraints:
            MaxValue: "16"
            MinValue: "2"
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "Your verification code is {####}."
        EmailSubject: "Verify your email address"

  SafeSchemeUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SafeSchemeUserPool
      ClientName: SafeSchemeUserPoolClient
      AccessTokenValidity: 10
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - profile
        - email
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://staging.d28alr4nb9gk3w.amplifyapp.com/callback
      LogoutURLs:
        - https://staging.d28alr4nb9gk3w.amplifyapp.com/logout
      ExplicitAuthFlows:
        - ALLOW_USER_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      SupportedIdentityProviders:
        - COGNITO

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${SafeSchemeAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  UserPoolId:
    Value: !Ref SafeSchemeUserPool
    Description: 'Cognito User Pool ID'

  UserPoolClientId:
    Value: !Ref SafeSchemeUserPoolClient
    Description: 'Cognito User Pool Client ID'
